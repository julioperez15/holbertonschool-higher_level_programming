Test module: def integer_validator(self, name, value)
------------
This is an example text file in reStructuredText format.
------------

First import ``integer_validator`` from the ``7-base_geometry`` module:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Try it:
>>> bg = BaseGeometry()

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> bg.integer_validator("Belen", 24)

>>> bg.integer_validator("string", 3.14)
Traceback (most recent call last):
TypeError: string must be an integer

>>> bg.integer_validator("string", "not_a_int")
Traceback (most recent call last):
TypeError: string must be an integer

>>> bg.integer_validator("string", 0)
Traceback (most recent call last):
ValueError: string must be greater than 0

>>> bg.integer_validator("string", -2)
Traceback (most recent call last):
ValueError: string must be greater than 0

>>> bg.integer_validator("Belen")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("string", (4,))
Traceback (most recent call last):
TypeError: string must be an integer

>>> bg.integer_validator("string", [3])
Traceback (most recent call last):
TypeError: string must be an integer

>>> bg.integer_validator("string", True)
Traceback (most recent call last):
TypeError: string must be an integer

>>> bg.integer_validator("string", {1, 2})
Traceback (most recent call last):
TypeError: string must be an integer

>>> bg.integer_validator("string", None)
Traceback (most recent call last):
TypeError: string must be an integer